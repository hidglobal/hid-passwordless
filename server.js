require('dotenv').config();
const express = require('express');
const path = require('path');
const session = require('express-session');
let sessionStore = new session.MemoryStore();
if (process.env.NODE_ENV === 'production') {
  const redis = require('redis');
  const RedisStore = require('connect-redis').default;
  const redisClient = redis.createClient({url: process.env.REDIS_URL});
  redisClient.connect().catch((err) => { console.error('Redis connection error: ', err); });
  sessionStore = new RedisStore({ client: redisClient });
}
const app = express();
const port = process.env.PORT || 8080;

app.use(session({
  secret: process.env.SESSION_SECRET,
  cookie: { maxAge: 60000 },
  store: sessionStore,
  resave: false,
  saveUninitialized: false,
  unset: 'destroy'
}));
app.use(express.json());
app.use(express.urlencoded({extended: true}));
app.use(express.static(path.join(__dirname, 'public')));

app.post('/register-options', (req, res) => {
  const authBasic = Buffer.from(`${process.env.HID_CLIENT_ID}:${process.env.HID_CLIENT_SECRET}`, 'utf8').toString('base64');

  // 1. Get application access token
  fetch(`${process.env.HID_AUTH_URL}/token`, {
    method: 'POST',
    headers: {
      'Authorization': `Basic ${authBasic}`,
      'Content-Type': 'application/x-www-form-urlencoded',
    },
    body: 'grant_type=client_credentials'
  })
  .then((response) => {
    if (response.ok) {
      response.json().then((data) => {
        req.session.access_token = data.access_token;
        // 2. Create the user, fails 409 if already exists
        const createUser = {
          userName: req.body.username,
          externalId: req.body.username,
          groups: [
            {value: "UG_ROOT"}
          ]
        }
        fetch(`${process.env.HID_SCIM_URL}/Users`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${req.session.access_token}`,
            'Content-Type': 'application/scim+json'
          },
          body: JSON.stringify(createUser)
        })
        .then((response) => {
          console.log('Create user: ' + response.status + ' ' + response.statusText);
          // 3. Create the PAR request
          const params = new URLSearchParams();
          params.append('response_type', 'code');
          params.append('client_id', process.env.HID_CLIENT_ID);
          params.append('redirect_uri', process.env.HID_REDIRECT_URI);
          params.append('scope', 'openid profile');

          fetch(`${process.env.HID_AUTH_URL}/par`, {
            method: 'POST',
            headers: {
              'Authorization': `Bearer ${req.session.access_token}`,
              'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: params
          })
          .then((response) => {
            delete req.session.access_token; // We don't need it anymore now that we have a PAR
            if (response.ok) {
              response.json().then((data) => {
                req.session.username = req.body.username;
                req.session.request_uri = data.request_uri;
                // 4. Get FIDO registration options
                const request = {
                  enroll_step: 'getcredentialoptions',
                  username: req.body.username,
                  request_uri: data.request_uri,
                  authType: 'AT_FIDO'
                };
                fetch(`${process.env.HID_AUTH_URL}/enroll/fido`, {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json'
                  },
                  body: JSON.stringify(request)
                })
                .then((response) => {
                  if (response.ok) {
                    req.session.csrf = response.headers.get('server-csrf-token');
                    response.json().then((data) => {
                      res.json(data);
                    });
                  } else {
                    console.error(`/enroll/fido (Get Options): ${response.status} ${response.statusText}`);
                    res.status(response.status).send(response.statusText);
                  }
                })
                .catch((err) => {
                  console.error(err);
                });
              });
            } else {
              res.status(response.status).send(response.statusText);
            }
          })
          .catch((err) => {
            console.error(err);
          });

        })
      });
    } else {
      // Client authentication error
      console.error(`Client authentication: ${response.status} ${response.statusText}`);
    }
  })
  .catch((err) => {
    console.log(err);
  });
});

app.post('/register', (req, res) => {
  // Straightforward, just register the credential generated by the browser
  console.assert(req.session.request_uri !== undefined, 'Missing request_uri for registration');
  const request = {
    enroll_step: 'registercredential',
    username: req.session.username,
    request_uri: req.session.request_uri,
    authType: 'AT_FIDO',
    credential: req.body.credential
  };
  fetch(`${process.env.HID_AUTH_URL}/enroll/fido`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'server-csrf-token': req.session.csrf
    },
    body: JSON.stringify(request)
  })
  .then((response) => {
    if (response.ok) {
      delete req.session;
      res.status(200).send('OK');
    } else {
      console.error(`/enroll/fido (Register): ${response.status} ${response.statusText}`);
      res.status(response.status).send(response.statusText);
    }
  })
  .catch((err) => {
    console.log(err);
  });
});

app.post('/authenticate-options', (req, res) => {
  const authBasic = Buffer.from(`${process.env.HID_CLIENT_ID}:${process.env.HID_CLIENT_SECRET}`, 'utf8').toString('base64');

  // 1. Get application access token
  fetch(`${process.env.HID_AUTH_URL}/token`, {
    method: 'POST',
    headers: {
      'Authorization': `Basic ${authBasic}`,
      'Content-Type': 'application/x-www-form-urlencoded',
    },
    body: 'grant_type=client_credentials'
  })
  .then((response) => {
    if (response.ok) {
      response.json().then((data) => {
        req.session.access_token = data.access_token;
        // 2. Create a PAR request
        const params = new URLSearchParams();
        params.append('response_type', 'code');
        params.append('client_id', process.env.HID_CLIENT_ID);
        params.append('redirect_uri', process.env.HID_REDIRECT_URI);
        params.append('scope', 'openid profile');

        fetch(`${process.env.HID_AUTH_URL}/par`, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${req.session.access_token}`,
            'Content-Type': 'application/x-www-form-urlencoded'
          },
          body: params
        })
        .then((response) => {
          if (response.ok) {
            response.json().then((data) => {
              req.session.username = req.body.username;
              req.session.request_uri = data.request_uri;
              const request = {
                grant_type: 'fido_challenge',
                username: req.body.username,
                request_uri: data.request_uri,
                authType: 'AT_FIDO'
              };
              fetch(`${process.env.HID_AUTH_URL}/code`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(request)
              })
              .then((response) => {
                if (response.ok) {
                  req.session.csrf = response.headers.get('server-csrf-token');
                  response.json().then((data) => {
                    res.json(data);
                  });
                } else {
                  console.error(`/code (Get Options): ${response.status} ${response.statusText}`);
                  res.status(response.status).send(response.statusText);
                }
              })
              .catch((err) => {
                console.error(err);
              });
            });
          } else {
            res.status(response.status).send(response.statusText);
          }
        })
        .catch((err) => {
          console.error(err);
        });
      });

    } else {
      // Client authentication error
      console.error(response.status + ' ' + response.statusText);
    }
  })
  .catch((err) => {
    console.log(err);
  });  
});

app.post('/authenticate', (req, res) => {
  console.assert(req.session.request_uri !== undefined, 'Missing request_uri for authentication');
  const request = {
    grant_type: 'password',
    username: req.session.username,
    request_uri: req.session.request_uri,
    authType: 'AT_FIDO',
    password: req.body.credential.response
  };
  fetch(`${process.env.HID_AUTH_URL}/code`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'server-csrf-token': req.session.csrf
    },
    body: JSON.stringify(request)
  })
  .then((response) => {
    req.session.csrf = response.headers.get('server-csrf-token');
    const finalize = new URLSearchParams();
    finalize.append('grant_type', 'code_request');
    finalize.append('username', req.session.username);
    finalize.append('authType', 'AT_FIDO');
    finalize.append('request_uri', req.session.request_uri);
    
    if (response.ok) {
      console.log('Authentication successful, now get the token');

      fetch(`${process.env.HID_AUTH_URL}/code`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded',
          'server-csrf-token': req.session.csrf
        },
        body: finalize
      })
      .then((response) => {
        if (response) {
          response.json().then((data) => {
            res.json(data);
          });
        } else {
          console.error(`/code (Authenticate): ${response.status}: ${response.statusText}`);
          res.status(response.status).send(response.statusText);
        }
      })
    } else if (response.status === 400) {
      response.json().then((data) => {
        console.log(data);

        const consent = new URLSearchParams();
        consent.append('request_uri', req.session.request_uri);
        consent.append('username', req.session.username);
        consent.append('sharings', JSON.stringify([
            {scope: 'openid', status: 'accepted', exp: -1},
            {scope: 'profile', status: 'accepted', exp: -1},
        ]));
        
        fetch(`${process.env.HID_AUTH_URL}/consent`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'server-csrf-token': req.session.csrf
          },
          body: consent
        }).then((response) => {
          req.session.csrf = response.headers.get('server-csrf-token');
          if (response.ok) {
            console.log('Consent updated, now get the token');

            fetch(`${process.env.HID_AUTH_URL}/code`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'server-csrf-token': req.session.csrf
              },
              body: finalize
            })
            .then((response) => {
              if (response) {
                response.json().then((data) => {
                  res.json(data);
                });
              } else {
                console.error(`/code (Authenticate after consent): ${response.status}: ${response.statusText}`);
                res.status(response.status).send(response.statusText);
              }
            })
          } else {
            console.error(`/consent (Authenticate): ${response.status}: ${response.statusText}`);
            res.status(response.status).send(response.statusText);
          }
        })
      });
    }
  })
  .catch((err) => {
    console.error(err);
  });
});

app.get('/passkeys', (req, res) => {
  fetch(`${process.env.HID_SCIM_URL}/Users/.search`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${req.session.access_token}`,
      'Content-Type': 'application/scim+json'
    },
    body: JSON.stringify({filter: `userName eq ${req.session.username}`})
  })
  .then((response) => {
    if (response.ok) {
      response.json().then((user) => {
        fetch(`${process.env.HID_SCIM_URL}/Device?filter=owner.value%20eq%20${user.resources[0].id}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${req.session.access_token}`,
          }
        })
        .then((response) => {
          if (response.ok) {
            response.json().then((devices) => {
              res.json({userName: user.resources[0].userName, devices: devices.resources});
            })
          } else {
            console.error(`/Device?filter=owner.value: ${response.status} ${response.statusText}`);
            res.status(response.status).send(response.statusText);
          }
        })
      });
    } else {
      console.error(`/Users/.search: ${response.status} ${response.statusText}`);
      res.status(response.status).send(response.statusText);
    }
  })
});

app.get('/health', (req, res) => {
  fetch(`${process.env.HID_AUTH_URL}/token`, {
    method: 'OPTIONS'
  })
  .then((response) => {
    res.status(200).send('OK');
  })
  .catch((err) => {
    res.status(500).send(err);
  });
});

app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, '/public/index.html'));
});

app.listen(port, () => console.log(`Customer Journey listening on port ${port}!`));
